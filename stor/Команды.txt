1. java -jar h2-2.1.214.jar - команда для запуску бази
   
jdbc:h2:~/test  - шлях до бази   + sa

C:\Users\Vyacheslav\Desktop\Baze\h2\bin - дірікторія бази h2

C:\Users\Vyacheslav\PROJECTS\WORK_WITH_JDBS/test - шлях до бази проєкту

Ctrl+Alt+L - Reformat code
------------------------------------------------------------------------------------------------------------------------------
2. Наприклад, ось так можна створити таблицю human з полями name, age та married:

CREATE TABLE human (
    name VARCHAR(100) PRIMARY KEY, // 100 - макс колво символов 
    age INT,         // PRIMARY KEY - може бути для декількох колонок по ньому далі робляться запити, це унікальний тип накшталт паспорта чи индеф коду, якщо воно є то дублікати в таблицю вже не пройдуть
    married BOOLEAN
)

Основні моменти, що потрібно розуміти:

у таблиці має бути первинний ключ (PRIMARY KEY). Деякі СУБД допускають роботу без первинного ключа, 
але майже завжди це погана ідея. Первинним ключом може бути одна колонка або декілька. 
Якщо колонок декілька - тоді це називається композитний первинний ключ.
для кожного поля (колонки в таблиці) необхідно вказати назву та тип даних.
-----------------------------------------------------------------------------------------------------------------------------
3. Створення таблиці з композитним первинним ключем
Типовий приклад композитних первинних ключів - проміжні таблиці для створення зв'язків багато-до-багатьох.

Наприклад, ось так може виглядати створення таблиці для відношення проектів та відділів:

CREATE TABLE project_department (
    project_id BIGINT,
    department_id BIGINT,
    PRIMARY KEY (project_id, department_id)
)
---------------------------------------------------------------------------------------------------------------------------
4. Для цього є команда ALTER TABLE <table_name> ADD COLUMN <col_name> <col_def>

Наприклад, ось так можна додати нову колонку в таблицю human:

ALTER TABLE human ADD COLUMN indificator INT;
-------------------------------------------------------------------------------------------------------------------------
5. Наступні типи даних доступні у всіх популярних реляційних СУБД (неповний список):

VARCHAR - рядок. Аналог String у Java.
BOOLEAN - булевий тип даних. Аналог boolean у Java.
INTEGER - ціле число. Аналог int у Java.
BIGINT - велике ціле число. Аналог long у Java.
NUMERIC - десяткове число без втрати точності. Використовується для зберігання валюти, наприклад. Аналог BigDecimal у Java.
REAL - число з плаваючою крапкою. Аналог float у Java.
DATE - дата. Аналог LocalDate у Java.
--------------------------------------------------------------------------------------------------------------------
6. Для додавання нових записів використовується команда INSERT.

Базовий синтаксис - INSERT INTO <table> (<col_names>) VALUES (<values>).

Наприклад, додати один запис в таблицю human можна ось так:

INSERT INTO human (name, birthday, married) VALUES('Gregor', '2000-01-01', false);

Однією командою можна додати одразу декілька записів, розділяючи їх комою, наприклад:

INSERT INTO human 
(name, birthday, married) 
VALUES
    ('Gregor', '2000-01-01', false),
    ('Max', '1998-11-30', true);

ПРИМІТКА
Рядки (VARCHAR, TEXT) та дати (DATE, DATETIME, TIMESTAMP) необхідно екранувати одинарними лапками '. 
Числа (INT, BIGINT), булеві значення (BOOLEAN) екранувати не потрібно.

------------------------------------------------------------------------------------------------------------------------------
7. Видалення записів - DELETE
Для видалення даних є команда DELETE.

Базовий синтаксис виглядає наступним чином - DELETE FROM <table> WHERE <condition>.

ТИПОВА ПОМИЛКА
Якщо викликати команду видалення без WHERE, вона спрацює, але видалить всі записи з таблиці. 
Наприклад, команда DELETE FROM human очистить таблицю human. 
Тому використання DELETE без WHERE вважається типовою помилкою, і багато інструментів для роботи з базами даних 
видають попередження при спробі виконати цю команду.

Ось приклад, як видалити всіх неодружених людей з таблиці human:

DELETE FROM human WHERE married = false;

Умова WHERE може бути якою завгодно комплексною. Можна використовувати оператори OR, AND та дужки () 
для побудови складної умови. Наприклад, ось запит для видалення з таблиці human людей, 
які народились між 1990 та 2000 роками включно:

DELETE FROM human WHERE birthday >= '1990-01-01' AND birthday <= '2000-12-31';
---------------------------------------------------------------------------------------------------------------------------------
8. Модифікація записів - UPDATE
Для цього є команда UPDATE. Базовий синтаксис виглядає наступним чином - UPDATE <table> SET <col_name>=<value> WHERE <condition>.

Наприклад, ось так ми можемо замінити всім людям з ім'ям John на ім'я Kelvin:

UPDATE human SET name = 'Kelvin' WHERE name = 'John'

З WHERE ситуація така ж, як і для команди DELETE. 
Це необов'язкова умова, і можна виконати UPDATE без умови WHERE, але тоді оновляться всі записи в таблиці. 
Інколи це потрібно, але частіше це схоже на помилковий запит.

Командою UPDATE можна оновити декілька колонок одразу, наприклад ось так можна змінити ім'я та дату народження:

UPDATE human SET name = 'Kelvin', birthday = '1985-10-10' WHERE name = ''

В прикладі вище умова, яка не виконується для жодного рядка таблиці (name = ''). 
Тому команда UPDATE не застосується до жодного рядка. Це нормальна ситуація

==================================================================================================================================
9. Вибірка даних - SELECT
Вибірка даних - найскладніша DML команда, тому що бізнес-логіка нашої програми може бути складною, 
і потрібно вибирати одним запитом інформацію з одразу декількох таблиць.

Базовий синтаксти команди виглядає так - SELECT <col_name1>, <col_name2> FROM <table>.

Наприклад, ось так можна вибрати всі дані з таблиці human:

SELECT name, birthday, married FROM human

Найчастіше нам не потрібні всі дані, тому ми використовуємо вираз WHERE. Наприклад, 
ось так можна вибрати імена неодружених людей:

SELECT name FROM human WHERE married = false

Якщо таблиця велика (в ній багато полів), і ми хочемо отримати всі колонки - 
ми можемо написати замість назв колонок символ *. Цим ми попросимо СУБД вибрати всі колонки, наприклад:

SELECT * FROM human

Тобто повернуться всі поля таблиці.

ПОТЕНЦІЙНА ПЕРФОМАНС ПРОБЛЕМА
Вираз SELECT * допустимий, коли ви працюєте в консолі і досліджуєте СУБД. 
Але не використовуйте його в Java-коді, наприклад, тому що це нееффективно. 
Явно вказуйте назви колонок, які ви хочете отримати.

=================================================================================================================================
10. LIMIT та OFFSET
Інколи нам потрібно отримати не всі результати запиту, а лише наприклад перший.

Для цього є конструкція LIMIT <n>. Вона обмежує вибірку першими n елементами. 
Наприклад, ось так можна отримати лише один елемент з таблиці human:

SELECT * FROM human LIMIT 1

Наступна ситуація - нам необхідно пропустити якусь кількість елементів при вибірці.

Для цього є конструкція OFFSET <n>. Ця конструкція пропускає n перших елементів при вибірці. 
Наприклад, такий запит вибере всі елементи з таблиці human крім перших двох:

SELECT * FROM human OFFSET 2

Часто ці дві конструкції об'єднують в одну для пагінації (pagination). Це спосіб вибірки лише частини даних з таблиці.

Наприклад, у нас є таблиця на 100 000 записів. А ми хочемо показувати її користувачу по частинах - наприклад, 
по 50 записів за один раз. Тоді для показу сторінки з номером n буде запит виду SELECT * FROM human OFFSET 50*(n-1) LIMIT 50.

Вибірка сторінки №5 тоді виглядатиме наступним чином:

SELECT * FROM human OFFSET 200 LIMIT 50

Ми пропускаємо перші 200 результатів (це 4 сторінки) і беремо лише 50 результатів - це і буде 5-та сторінка.
==================================================================================================================================

11. DISTINCT
Оператор DISTINCT дозволяє залишити лише унікальні результати.

Наприклад, ось так можна вибрати унікальні імена:

SELECT DISTINCT name FROM human

Якщо в таблиці human будуть повтори (наприклад два John), то DISTINCT залишить лише одну версію.

===================================================================================================================================
12. UNION
Дозволяє об'єднувати результати двох запитів у один.

Наприклад:

SELECT name FROM human WHERE birthday = '1992-03-04'
UNION
SELECT name FROM human WHERE married = false

=================================================================================================================================
13.ORDER BY
Коли ми вибираємо дані, то вони повертаються у невизначеному порядку. 
Частіше за все це буде порядок їх додавання, але може бути і інший. Це залишається на розсуд СУБД.

Якщо ми хочемо явно відсортувати дані по якомусь полю, ми можемо додати конструкцію ORDER BY.

Наприклад, ось так можна відсортувати людей по даті їх народження (спочатку будуть йти люди, що народились раніше):

SELECT * FROM human ORDER BY birthday

Якщо ж ми хочемо змінити порядок сортування (від більшого до меншого), то додається слово DESC:

SELECT * FROM human ORDER BY birthday DESC

Корисні моменти по сортуванню:

сортувати можна одразу по декількох полях - просто необхідно перерахувати ці поля після ORDER BY
сортування часто використовується з OFFSET та LIMIT. Вибирається порядок сортування, 
потім словами OFFSET та LIMIT вибирається потрібна частина.

==================================================================================================================================

14. GROUP BY
Ми можемо згрупувати дані при вибірці по одному або більше полях. Для цього використовується вираз GROUP BY.

Наприклад, ось так ми можемо дізнатись кількість одружених та неодружених людей, згрупувавши вибірку по полю married:

SELECT married, count(name) FROM human GROUP BY married

У використанні GROUP BY є свої тонкощі. Якщо ми використовуємо у SELECT поля, 
по яким не групуємо (в прикладі вище це name), то вони мають бути у агрегатних функціях (про це трохи нижче).

=================================================================================================================================

15. JOIN
До цього часу ми вибирали дані з однієї таблиці. Але в реальному житті нам часто потрібно вибирати 
та об'єднувати дані з двох та більше таблиць.

Для цього є слов JOIN. Основна ідея проста - ми вибираємо дані з першої таблиці. Далі використовуємо JOIN, 
пишемо назву іншої таблиці, та вказуємо умову - які саме рядки додати до першої таблиці.

Ось приклад, як до таблиці human додати країни, де вони проживають, використовуючи таблицю human_country:

SELECT name, country
FROM human
JOIN human_country ON human.name = human_country.human_name

Зверніть увагу, що вивелось лише два результати - тому що лише для John та Mary знайшлись відповідні записи в 
таблиці human_country. Це результат поведінки JOIN по замовчуванню - INNER JOIN.

Цю поведінку JOIN можна змінити, використовуючи LEFT JOIN, RIGHT JOIN і т.д. Це обширна тема, 
що виходить за рамки конспекту, тому інформацію про різні типи JOIN пошукайте самостійно в інтернеті.

==================================================================================================================================

16.